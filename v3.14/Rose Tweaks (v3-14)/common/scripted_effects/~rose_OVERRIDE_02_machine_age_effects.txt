create_synth_species_effect = {
	if = {
		limit = {
			NOT = {
				exists = event_target:synthspecies@root.owner
			}
		}
		owner_main_species = {
			create_species = {
				is_mod = yes
				name = this
				plural = this
				class = "ROBOT"
				portrait = "default_robot"
				traits = {
					trait = trait_mechanical
					trait = trait_robot_immortality
				}
				can_be_modified = this
				homeworld = this
				namelist = this
				gender = this

				effect = {
					set_synth_origin_traits_effect = yes
					set_synth_or_robot_portrait_effect = yes
					
					# Uses same portrait from original species
					if = {
						limit = {
							root.owner = {
								OR = {
									has_country_flag = rose_synth_chose_portrait_original
									has_country_flag = synthetic_fertility_no_bodies_left
								}
							}
						}
						change_species_characteristics = { portrait = event_target:rose_synthetic_choice_original_species@root.owner }
					}
					
					# Gets robot portrait from top robot species
					else_if = {
						limit = {
							root.owner = {
								has_country_flag = rose_synth_chose_portrait_robots
								exists = event_target:rose_synthetic_choice_largest_robot_pop@root.owner
							}
						}
						change_species_characteristics = { portrait = event_target:rose_synthetic_choice_largest_robot_pop@root.owner }
					}

					# Prompts to rename the new ascended species
					rename_species = { 
						prompt_country = root 
						name_list = ascension_list
					}

					save_global_event_target_as = synthspecies@root.owner
				}
			}
		}
		owner = {
			if = {
				limit = {
					has_policy_flag = robots_outlawed
				}
				set_policy = {
					policy = robot_pop_policy
					option = robot_pops_allowed
					cooldown = yes
				}
			}
			if = {
				limit = {
					OR = {
						has_policy_flag = ai_servitude
						has_policy_flag = ai_outlawed
					}
				}
				set_policy = {
					policy = artificial_intelligence_policy
					option = ai_full_rights
					cooldown = yes
				}
			}
		}
	}
}